< 04. 프로젝트 구현 >

[ 25. 디자이너의 업무 ]
	1. 일러스트 디자인
	2. 그래픽 디자인
	3. UX/UI 디자인
		- 기능이나 상태에 따라 표현할 것이 달라짐
		- 시각적인 정보까지 포함해 디자인으로 표현해주는 것
		- 프로토타입 툴에 대해 익혀두면 좋음
		- 디자이너 산출물 : 디자인 컨셉서, 디자인 전략서, 디자인 스타일 가이드
	
	4. 디자이너에게 전달할 정보
		1) Identity : 시각적인 아이덴티티만이 아니릴 기획자가 생각하는 브랜드(또는 서비스)를 아우르는 아이덴티티를 전달할 것
		2) Target : 타겟에 대한 정보 전달의 톤앤 매너
		3) Concept
		

[ 26. 퍼블리셔의 업무 ]
	1. 퍼블리셔의 업무 범위
		- 스타일시트(해당 페이지에 들어간 스타일)를 컨트롤
		- 스타일 시트에 맞는 HTML 코딩
	
	2. 퍼블리셔의 주요 관심사항
		1) 웹 접근성 Web Accessibility
			- 장애를 가진 사람과 장애를 가지지 않은 사람 모두가 웹사이트를 이용할 수 있게 하는 방식
			- 모든 사용ㅅ자들은 정보와 기능헤 동등하게 접근할 수 있다
		2) 장차법(장애인차별금지법)
			- 모든 생활영역에서 장애를 이유로 한 차별을 금지하고 차별받는 사람의 권익을 효과적으로 구제함으로써 장애인의 완전한 사회참여와 평등권 실천을 통한 인간으로서의 존엄과 가치 실천을 위해 제정된 법
		3) HTML
		4) CSS
	
	3. 접근성 인증심사
		1) 모바일 접근성 심사대상과 기준
			- 안드로이드와 iOS 애플리케이션으로 구분하여 접수 및 심사를 진행하며 MACAG 2.0을 준용하여 해당 어플리케이션의 주목적 기능이 접근성의 핵심 요소인 인식과 운용 가능 측면에서 용이하도록 개발되었는지를 기준으로 함
		2) 모바일 접근성 심사환경
			- OS 버전 : 해당 모바일 애플리케이션이 지원하는 가장 최신의 OS 버전
			- 기기(Divice) : 해당 OS를 지원하는 레퍼런스 기기
		
		3) 준수 4대 원칙
			- 인식의 용이성 : 적절한 대체 텍스트 제공 / 자막 제공 / 색에 무관한 컨텐츠 인식 / 명확한 지시사항 제공 / 텍스트 컨텐츠의 명도 대비 / 자동재생 금지
			- 운용의 용이성 : 컨텐츠 간의 구분 / 비코드 사용 보장 / 초점이동 / 조작 기능 / 응답시간 조절 / 정지 기능 제공 / 깜빡임과 번쩍임 사용 제한 / 반복영역 건너뛰기 / 제목 제공 / 적절한 링크텍스트
			- 이해의 용이성 : 기본 언어 표시 / 사용자 요구에 따른 실행 / 컨텐츠의 선형화 / 표의 구성 / 레이블 제공 / 오류 정정
			- 견고성 : 마크업 오류 방지 / 웹 어플리케이션 접근성 준수
	
	4. 반응형/적응형 웹
		1) 반응형(공급자 위주) : 모바일과 PC에 동일 적용이 되어야 하기 때문에 UI에 제약 사항이 생김
		2) 적응형 : PC버전과 모바일버전만 적용

[ 27. 프로그래머의 업무 ]
	1. 프로그래머의 업무 범위
		1) 개발언어
		2) OS
		3) web server
		4) web application server
		5) web framework : 개발을 위해 사용되는 오브젝트, 라이브러리들의 패키징
		6) database
	
	2. 개체관계도 ERD
		- 구조화된 데이터를 저장하기 위해 데이터베이스를 쓴다.
		- 이 데이터의 구조 및 그에 수반한 제약조건들은 다양한 기법에 의해 설계될 수 있다.
		- 그 기법 중 하나가 개체관계 모델링(ERM)이다.
		- ERM 프로세스의 산출물을 가리켜 개체 관계 다이어그램(ERD)이라 한다
		- 개체 Entity
		- 관계 Relationship
		- 속성 Attribute

[ 28. 데이터베이스와 API ]
	1. 데이터베이스의 이해
		- 여러 사람들이 공유하고 사용할 목적으로 통합 관리되는 정보의 집합
		- 논리적으로 연관된 하나 이상의 자료의 모음으로 그 내용을 고도로 구조화함으로써 검색과 갱신의 효율화를 꾀한 것
		- 즉, 몇 개의 자료 파일을 조직적으로 통합하여 자료 항목의 중복을 업애고 자료를 구조화하여 기억시켜 놓은 자료의 집합체라고 할 수 있다
		
	2. API에 대한 이해
		- 웹 API는 웹 어플리케이션 개발에서 다른 서비스에 요청을 보내고 응답을 받기 위해 정의된 명세
		- 예를 들어 블로그 API를 이용하면 블로그에 접속하지 않고도 다른 방법으로 글을 올릴 수 있다
		- 그 외에 우체국의 우편번호 API, 구글&네이버의 지도 API 등

[ 29. 모바일 플랫폼 ]
	1. 모바일 플랫폼의 종류
		1) Native APP
			- 모바일 OS별로 개발
			- 장점 : 모바일 하드웨어와 최적화시켜 개발되므로 성능이 가장 우수하며, 동적 구현에 제약이 가장 적고 네트워크 연결 없이 사용 가능
			- 단점 : OS별 버전별 별도 개발해야하므로 개발 기간이나 비용소비가 많으며, 업데이트나 수정이 난해하여 운영의 효율성이 낮음
		2) Mobile WEB
			- PC웹 기술과 동일하ㅔ 개발하지만 모바일 웹브라우저에 최적화되도록 UX와 해상도에 맞게 개발
			- 장점 : 모바일OS와 상관없이 HTML 표준방식으로 개발하여 어느 디바이스에서나 서비스 구현이 가능
			- 단점 : 브라우저 및 네트워크 속도에 의해 성능이슈가 발생할 수 있고, 모바일 특성을 활용한 서비스 구현이 불가
		3) Hybride APP
			- Native APP과 Mobile WEB의 장점을 이용하여 서비스의 목적에 맞게 상호 호환되도록 개발
			- 장점 : 운영관리의 용이함과 모바일 특성의 일부 서비스 구현이 가능함의 장점을 모두 갖출 수 있음
			- 단점 : 브라우저-APP-로컬디바이스 간의 인터페이스 설계가 복잡해질 수 있으며, 네비게이션 설계가 제약이 있어 사용성이 불편할 수 있음

[ 30. 온라인 서비스 ]
	1. 플랫폼 포지셔닝
	

[ 31. 이슈사항 ]
	1순위 : 이슈가 발생하지 않도록 철저하고 세밀한 기획
	2순위 : 이슈가 발생했을 때 빠른 공유와 해결


[ Today my impression ]
데이터 분석으로 공부하며 배웠던 것들이라 전반적으로 다 아는 내용이었음